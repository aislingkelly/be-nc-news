{
  "GET /api": {
    "description": "Provides a comprehensive list of all available endpoints in the API, along with their respective descriptions and query options.",
    "queries": [],
    "format": "JSON object",
    "exampleResponse": {
      "endpoints": [
        {
          "path": "GET /api/topics",
          "description": "Retrieves a list of discussion topics.",
          "queries": [],
          "format": "array"
        },
        {
          "path": "GET /api/articles",
          "description": "Fetches a collection of articles with optional filtering by author, topic, sort order, and sort by fields.",
          "queries": ["author", "topic", "sort_by", "order"],
          "format": "array"
        }
      ]
    }
  },
  "GET /api/topics": {
    "description": "Retrieves an array of all available discussion topics, each with a unique slug and description.",
    "queries": [],
    "format": "array",
    "exampleResponse": {
      "topics": [
        { "slug": "sports", "description": "All about sports" },
        { "slug": "technology", "description": "Latest tech trends" }
      ]
    }
  },
  "GET /api/articles": {
    "description": "Fetches an array of articles, allowing for optional query parameters to filter the results by author, topic, and sorting criteria. Additionally, supports pagination to handle large data sets efficiently. The 'sort_by' query allows sorting by any valid article column, defaulting to 'created_at' date. The 'order' query can be 'asc' or 'desc', defaulting to descending order. When the 'topic' query is provided, it filters the articles by the specified topic. Pagination is achieved through 'limit' and 'p' queries, where 'limit' sets the number of articles per page (defaulting to 10), and 'p' specifies the page number.",
    "queries": ["author", "topic", "sort_by", "order", "limit", "p"],
    "format": "object",
    "exampleResponse": {
      "articles": [
        {
          "title": "Exploring the Urban Jungle",
          "topic": "city_life",
          "author": "urban_explorer",
          "article_id": 30,
          "created_at": "2022-07-19T16:45:00.000Z",
          "votes": 15,
          "comment_count": 2,
          "article_img_url": "https://example.com/image30.jpg",
          "total_count": 50
        },
        {
          "title": "The Hidden World of Microbes",
          "topic": "science",
          "author": "microbiologist",
          "article_id": 31,
          "created_at": "2022-07-20T09:20:00.000Z",
          "votes": 20,
          "comment_count": 4,
          "article_img_url": "https://example.com/image31.jpg",
          "total_count": 50
        }
      ]
    }
  },
  "GET /api/users": {
    "description": "Retrieves an array of all registered users.",
    "queries": [],
    "format": "array",
    "exampleResponse": {
      "users": [
        {
          "username": "user1",
          "name": "User One",
          "avatar_url": "https://example.com/avatar1.jpg"
        },
        {
          "username": "user2",
          "name": "User Two",
          "avatar_url": "https://example.com/avatar2.jpg"
        }
      ]
    }
  },
  "GET /api/articles/:id": {
    "description": "Retrieves details of a specific article identified by its unique ID. The response includes article content, metadata, and associated comments.",
    "queries": [],
    "format": "object",
    "exampleResponse": {
      "article": {
        "title": "Exploring the Ocean Depths",
        "topic": "science",
        "author": "deep_sea_explorer",
        "article_id": 21,
        "created_at": "2020-08-15T12:35:00.000Z",
        "votes": 100,
        "comment_count": 12,
        "article_img_url": "https://example.com/image21.jpg"
      }
    }
  },
  "GET /api/users/:username": {
    "description": "Retrieves details of a specific user identified by their username. The response includes the user's username, avatar URL, and name.",
    "queries": [],
    "format": "object",
    "exampleResponse": {
      "user": {
        "username": "example_user",
        "name": "Example User",
        "avatar_url": "https://example.com/avatar/example_user.jpg"
      }
    }
  },
  "GET /api/articles/:article_id/comments": {
    "description": "Retrieves comments for a specific article identified by its unique ID, with added pagination functionality. This ensures efficient handling of large sets of comments. Pagination is controlled through 'limit' and 'p' queries, where 'limit' sets the number of comments per page (defaulting to 10), and 'p' specifies the page number to start from.",
    "queries": ["limit", "p"],
    "format": "object",
    "exampleResponse": {
      "comments": [
        {
          "comment_id": 201,
          "article_id": 50,
          "username": "nature_lover",
          "body": "This article on wildlife conservation is eye-opening!",
          "votes": 5,
          "created_at": "2023-10-05T11:00:00.000Z"
        },
        {
          "comment_id": 202,
          "article_id": 50,
          "username": "eco_warrior",
          "body": "Great insights on the impact of climate change on biodiversity.",
          "votes": 8,
          "created_at": "2023-10-06T09:30:00.000Z"
        }
      ]
    }
  },
  "POST /api/articles": {
    "description": "Adds a new article to the database. The request body should include the author, title, body, topic, and an optional article image URL. Responds with the newly added article, including all provided properties as well as generated properties like article_id, votes, created_at, and a default comment count.",
    "queries": [],
    "format": "object",
    "exampleResponse": {
      "article": {
        "author": "example_author",
        "title": "Example Title",
        "body": "Example article body content...",
        "topic": "example_topic",
        "article_id": 123,
        "created_at": "2023-11-24T12:00:00.000Z",
        "votes": 0,
        "comment_count": 0,
        "article_img_url": "https://example.com/image.jpg"
      }
    }
  },
  "POST /api/articles/:article_id/comments": {
    "description": "Adds a new comment to a specific article identified by its unique ID.",
    "queries": [],
    "format": "object",
    "exampleResponse": {
      "comment": {
        "comment_id": 101,
        "article_id": 5,
        "username": "user_example",
        "body": "This article provides valuable insights!",
        "votes": 0,
        "created_at": "2023-11-21T09:00:00.000Z"
      }
    }
  },
  "PATCH /api/articles/:article_id": {
    "description": "Updates the vote count of a specific article identified by its unique ID.",
    "queries": [],
    "format": "object",
    "exampleResponse": {
      "article": {
        "article_id": 10,
        "title": "Generic Story Titles are Easier",
        "body": "But they make it much more difficult to write a body...",
        "votes": 120,
        "topic": "philosophy",
        "author": "gen_writer",
        "created_at": "2023-01-15T14:30:00.000Z",
        "comment_count": 5
      }
    }
  },
  "PATCH /api/comments/:comment_id": {
    "description": "Updates the vote count of a specific comment identified by its unique comment ID. The request body should include an object with the 'inc_votes' property to indicate how much the votes should be incremented or decremented.",
    "queries": [],
    "format": "object",
    "exampleResponse": {
      "comment": {
        "comment_id": 101,
        "article_id": 5,
        "username": "user_example",
        "body": "This article provides valuable insights!",
        "votes": 10,
        "created_at": "2023-11-21T09:00:00.000Z"
      }
    }
  }
}
